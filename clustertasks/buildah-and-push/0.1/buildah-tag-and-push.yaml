apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build,buildah-tag-and-push,buildah-tag-and-push-0.1
    tekton.dev/platforms: "linux/amd64"
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/provider-type: community
  name: buildah-tag-and-push
spec:
  description: >-
    Buildah task builds source into a container image and then pushes it to a
    container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.
  params:
    - description: Reference of the image buildah will produce.
      name: IMAGE
      type: string

    - description: String of tags to tag and push, comma delimited.  Available variables include _SHORT_SHA, _LONG_SHA, _GIT_SHORT_SHA, _GIT_LONG_SHA
      name: IMAGE_TAGS
      type: string
      default: latest

    - default: >-
        registry.redhat.io/rhel8/buildah@sha256:23fb7971ea6ac4aaaaa1139473a602df0df19222a3b5a76b551b2b9ddd92e927
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string

    - default: vfs
      description: Set buildah storage driver
      name: STORAGE_DRIVER
      type: string

    - default: ./Dockerfile
      description: Path to the Dockerfile to build.
      name: DOCKERFILE
      type: string

    - default: .
      description: Path to the directory to use as context.
      name: CONTEXT
      type: string

    - default: 'true'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string

    - default: oci
      description: 'The format of the built container, oci or docker'
      name: FORMAT
      type: string

    - default: ''
      description: Extra parameters passed for the build command when building images.
      name: BUILD_EXTRA_ARGS
      type: string

    - default: ''
      description: Extra parameters passed for the push command when pushing images.
      name: PUSH_EXTRA_ARGS
      type: string

    - default: 'true'
      description: Log the commands that are executed during `git-clone`'s operation.
      name: verbose
      type: string

  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST

  steps:
    - image: $(params.BUILDER_IMAGE)
      name: build
      resources: {}
      script: |
        buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
          $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
          --tls-verify=$(params.TLSVERIFY) --no-cache \
          -f $(params.DOCKERFILE) -t $(params.IMAGE):local $(params.CONTEXT)
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        runAsUser: 0
        privileged: true
      workingDir: $(workspaces.source.path)

    - name: tag
      image: $(params.BUILDER_IMAGE)
      resources: {}
      env:
        - name: PARAM_VERBOSE
          value: $(params.verbose)
      script: |
        #!/usr/bin/env sh

        # Git Checksum Tags
        GIT_LONG_SUM=$(cat /tekton/results/commit)
        GIT_SHORT_SHA=${GIT_LONG_SUM:0:12}
        echo "GIT_LONG_SUM: $GIT_LONG_SUM"
        echo "GIT_SHORT_SHA: $GIT_SHORT_SHA"

        # Image Checksum Tags
        SHA_SUM=$(buildah images --digests | grep '$(params.IMAGE)' | tr -s '[:space:]' ' ' | cut -d ' ' -f 3)
        LONG_SHA="$(echo $SHA_SUM | sed -e 's/sha256://g')"
        SHORT_SHA=${LONG_SHA:0:12}
        echo "LONG_SHA: $LONG_SHA"
        echo "SHORT_SHA: $SHORT_SHA"

        tagArrayStr="$(params.IMAGE_TAGS)"
        echo "tagArrayStr: $tagArrayStr"

        for i in ${tagArrayStr//,/ }
        do
          tag="$i"
          if [ "$tag" == "_SHORT_SHA" ]; then
            tag="$SHORT_SHA"
          fi
          if [ "$tag" == "_LONG_SHA" ]; then
            tag="$LONG_SHA"
          fi
          if [ "$tag" == "_GIT_SHORT_SHA" ]; then
            tag="$GIT_SHORT_SHA"
          fi
          if [ "$tag" == "_GIT_LONG_SHA" ]; then
            tag="$GIT_LONG_SUM"
          fi

          buildah tag \
          $(params.IMAGE):local $(params.IMAGE):${tag}
        done
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        runAsUser: 0
        privileged: true
      workingDir: $(workspaces.source.path)

    - image: $(params.BUILDER_IMAGE)
      name: push
      resources: {}
      script: |
        #!/usr/bin/env sh

        set -eu

        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi

        # Git Checksum Tags
        GIT_LONG_SUM=$(cat /tekton/results/commit)
        GIT_SHORT_SHA=${GIT_LONG_SUM:0:12}

        # Image Checksum Tags
        SHA_SUM=$(buildah images --digests | grep '$(params.IMAGE)' | tr -s '[:space:]' ' ' | cut -d ' ' -f 3)
        LONG_SHA="$(echo $SHA_SUM | sed -e 's/sha256://g')"
        SHORT_SHA=${LONG_SHA:0:12}

        tagArrayStr="$(params.IMAGE_TAGS)"
        for i in ${tagArrayStr//,/ }
        do
          tag="$i"
          if [ "$tag" == "_SHORT_SHA" ]; then
            tag="$SHORT_SHA"
          fi
          if [ "$tag" == "_LONG_SHA" ]; then
            tag="$LONG_SHA"
          fi
          if [ "$tag" == "_GIT_SHORT_SHA" ]; then
            tag="$GIT_SHORT_SHA"
          fi
          if [ "$tag" == "_GIT_LONG_SHA" ]; then
            tag="$GIT_LONG_SUM"
          fi

          buildah --storage-driver=$(params.STORAGE_DRIVER) push \
            $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
            --digestfile $(workspaces.source.path)/image-digest-${tag} $(params.IMAGE):${tag} \
            docker://$(params.IMAGE):${tag}
        done
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        runAsUser: 0
        privileged: true
      workingDir: $(workspaces.source.path)

    - image: $(params.BUILDER_IMAGE)
      name: digest-to-results
      resources: {}
      script: >-
        NAMES=$(echo $(ls $(workspaces.source.path)/image-digest-*))
        namesArr=($(echo $NAMES))

        cat $(workspaces.source.path)/${namesArr[1]} | tee
        /tekton/results/IMAGE_DIGEST

        cat /tekton/results/IMAGE_DIGEST

  volumes:
    - emptyDir: {}
      name: varlibcontainers

  workspaces:
    - description: The path to shared result output files
      name: results
      mountPath: /tekton/results

    - name: source
